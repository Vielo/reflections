What happens when you initialize a repository? Why do you need to do it?

You create a new git project with either all the files already existing in a directory, or an empty one. If you don't do it, Git will not track changes and there will be no effective version control working.
############

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the 'twilight zone' between the working directory and the repository, temporarily storing selected changed that can later by committed to a repository or not. It allows the user to create 'batches' of files to be committed all at once, as opposed to doing that one by one.
############

How can you use the staging area to make sure you have one commit per logical change?

I can add multiple files that were changed due to some edits following a logic and them commit all of them at once, ensuring all that was changed is kept together for future reference.
############

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when some deviation from the 'true' course of the project was needed, such as an experiment on a new feature completely independent from the new iterations of the 'clue' of the project. Branches seem to help to keep things logically separated.
############

How do the diagrams help you visualize the branch structure?

Diagrams make it easier to get the idea of how the project structure is shaped - where the branches start, how big they are, how complicated the whole thing becomes. They also make it easier to checkout between the branches.
############

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a new branch, incorporating the old master and the merged branch. It's represented the way it is because it is still logically connected to all the commits made in the branched that were merged.
############

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git handles automatic merging very well when it comes to non-conflicting changes, and is only slightly annoying when you have to sort a conflict out. Relying on always merging manually can be tedious, as it requires diligent comparison between the two files, which isn't always easy. In the end, both ways require you to consult with the person that commited changes on one of the branches, but Git's automatic way saves time as it points the conflicting areas out.
############


