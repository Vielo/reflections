When would you want to use a remote repository rather than keeping all your work local?

I'd want to use the remote repository when there's more people working on the project, so the local repo simply would not suffice.
It would also help if I were to do any work on the project from another computer, i.e. switching between a work and home PC.
########

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I believe it's because you might not always want to automatically update stuff you are working on. It could introduce lots of chaos and would take away any kind of control over the project. Doing it manually also enables the user to actually select the branch they want to work on.
#########

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks let you clone another user's repository on Github (only there) so that you can use it as your own, while linking to the original author's repository (he will also be notified of someone forking his stuff). Clones simply clone the whole thing (from your own Github repository to the local drive or between the local directories; forks are clones in a way too). Branches let you try and experiment on new things on a single repository, meaning you can try to add new features without touching the stuff already present and working. Forks seem to be a great way to improve upon someone else's work on Github, while cloning is a good way to get the repository to the local directory in order to make work faster and not dependent on constant internet connection. Branching was already discussed earlier and its significance is unquestionable.
##########

What is the benefit of having a copy of the last known state of the remote stored locally?

You can work on it while not being connected to the internet. Aside from that, it can also act as a kind of backup in case things go wrong on the remote repository I suppose?
##########

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I would need to manually compare the files changed or look for some sort of tool to do that for me. Aside from that, keeping track of who did what and when would be much harder, requiring maintaining of a manual record. Small changes in projects  worked on by not so many people might actually be easier though, as Git and Github seem to be more useful the more complicated the project becomes. An extra advantage of Github is also the community, which can help you with issues since repositories can be kept open to public. An extra set of eyes and a fresh mind can do wonders.
##########

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I'd make changes in a separate branches whenever I need to work on a side feature (or an experiment) that does not exactly push the whole thing forward, but might improve it on a smaller scale. It also makes it easier to track changes and keep the logic of the development process separated in different branches. It also saves others the trouble of having to constantly check the master branch for changes made by other people which might not necessarily be concerning them. Working directly on master branch I think should be reserved for direct development of the main bulk of the project. Only when the side branch is completed and tested, should it be merged with the master.
##########